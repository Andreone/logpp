name: Create release

on:
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Name of version following SemVer e.g 0.1.0'
        required: true

jobs:
  create-release-tag:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build-config

      - name: Run CMake
        run: cmake ..
        working-directory: ${{ github.workspace }}/build-config      
        shell: bash

      - name: Check version
        working-directory: ${{ github.workspace }}/build-config
        shell: bash
        run: ${{ github.workspace }}/tools/check-version.sh ${{ github.event.inputs.versionName }}

      - name: Initialize mandatory git config
        run: |
           git config user.name "GitHub Actions"
           git config user.email noreply@github.com

      - name: Create release tag
        run: git tag v${{ github.event.inputs.versionName }} -m "Release v${{ github.event.inputs.versionName }}"

      - name: Push release tag
        run: git push origin v${{ github.event.inputs.versionName }}

  build-linux:
    strategy:
      matrix:
        include:

          # Static builds

          - compiler: gcc
            cc: gcc-9
            cxx: g++-9
            packages: gcc-9 g++-9
            conan_args:
            artifact: logpp-linux-gcc-static
          - compiler: clang
            cc: clang-10
            cxx: clang++-10
            packages: clang-10
            conan_args:
            artifact: logpp-linux-clang-static

          # Shared builds

          - compiler: gcc
            cc: gcc-9
            cxx: g++-9
            packages: gcc-9 g++-9
            conan_args: -o shared=True
            artifact: logpp-linux-gcc-shared
          - compiler: clang
            cc: clang-10
            cxx: clang++-10
            packages: clang-10
            conan_args: -o shared=True
            artifact: logpp-linux-clang-shared

    runs-on: ubuntu-latest
    name: build-${{ matrix.artifact }}
    steps:
      - uses: actions/checkout@v2

      - name: Install compiler
        run: sudo apt install ${{ matrix.packages }}

      - name: Install conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Create conan profile
        run: |
           conan profile new ${{ matrix.artifact }} --detect
           conan profile update settings.compiler.libcxx=libstdc++11 ${{ matrix.artifact }}
           conan profile update env.CXX=${{ matrix.cxx }} ${{ matrix.artifact }}
        env:
          CC:  ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build-${{ matrix.artifact }}

      - name: Fetch dependencies
        working-directory: ${{ github.workspace }}/build-${{ matrix.artifact }}
        shell: bash
        run: conan install .. -o build_tests=True ${{ matrix.conan_args }} -pr=${{ matrix.artifact }} --build=missing

      - name: Build
        working-directory: ${{ github.workspace }}/build-${{ matrix.artifact }}
        shell: bash
        run: conan build ..

      - name: Package
        working-directory: ${{ github.workspace }}/build-${{ matrix.artifact }}
        shell: bash
        run: cpack

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.artifact }}-${{ github.event.inputs.versionName }}.tar.gz
          path: "${{ github.workspace }}/build-${{ matrix.artifact }}/package/${{ matrix.artifact }}-${{ github.event.inputs.versionName }}.tar.gz"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: "${{ github.workspace }}/build-${{ matrix.artifact }}/package/${{ matrix.artifact }}-${{ github.event.inputs.versionName }}.tar.gz"
          tag_name: v${{ github.event.inputs.versionName }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    runs-on: windows-latest
    name: build-windows-msvc

    steps:
      - uses: actions/checkout@v2

      - name: Install conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Create conan profile
        run: conan profile new msvc --detect

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build-windows-msvc

      - name: Fetch dependencies
        working-directory: ${{ github.workspace }}/build-windows-msvc
        run: conan install .. -o build_tests=True -pr=msvc --build=missing

      - name: Build
        working-directory: ${{ github.workspace }}/build-windows-msvc
        run: conan build ..

      - name: Package
        working-directory: ${{ github.workspace }}/build-windows-msvc
        run: cpack

      - uses: actions/upload-artifact@v1
        with:
          name: logpp-windows-msvc-${{ github.event.inputs.versionName }}.zip
          path: "${{ github.workspace }}/build-windows-msvc/package/logpp-windows-msvc-static-${{ github.event.inputs.versionName }}.zip"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: "${{ github.workspace }}/build-windows-msvc/package/logpp-windows-msvc-static-${{ github.event.inputs.versionName }}.zip"
          tag_name: v${{ github.event.inputs.versionName }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
